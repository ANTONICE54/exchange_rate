// Code generated by MockGen. DO NOT EDIT.
// Source: rate_provider_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	"rate/internal/pkg/provider"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRateProvider is a mock of IRateProvider interface.
type MockIRateProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIRateProviderMockRecorder
}

// MockIRateProviderMockRecorder is the mock recorder for MockIRateProvider.
type MockIRateProviderMockRecorder struct {
	mock *MockIRateProvider
}

// NewMockIRateProvider creates a new mock instance.
func NewMockIRateProvider(ctrl *gomock.Controller) *MockIRateProvider {
	mock := &MockIRateProvider{ctrl: ctrl}
	mock.recorder = &MockIRateProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRateProvider) EXPECT() *MockIRateProviderMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockIRateProvider) GetRate() (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate")
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockIRateProviderMockRecorder) GetRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockIRateProvider)(nil).GetRate))
}

// SetNext mocks base method.
func (m *MockIRateProvider) SetNext(arg0 provider.IRateProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", arg0)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockIRateProviderMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockIRateProvider)(nil).SetNext), arg0)
}
